// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bipart
std::vector<NumericVector> bipart(int n);
RcppExport SEXP _divclust_bipart(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(bipart(n));
    return rcpp_result_gen;
END_RCPP
}
// fastSubstring_cut1
std::string fastSubstring_cut1(const std::string& s);
RcppExport SEXP _divclust_fastSubstring_cut1(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fastSubstring_cut1(s));
    return rcpp_result_gen;
END_RCPP
}
// fast_between_cluster_inert
NumericVector fast_between_cluster_inert(const NumericMatrix& Z, const NumericVector& cut_vals, const IntegerVector& indices, const NumericVector& X_col, const NumericVector& w, const NumericVector& D);
RcppExport SEXP _divclust_fast_between_cluster_inert(SEXP ZSEXP, SEXP cut_valsSEXP, SEXP indicesSEXP, SEXP X_colSEXP, SEXP wSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type cut_vals(cut_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type X_col(X_colSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_between_cluster_inert(Z, cut_vals, indices, X_col, w, D));
    return rcpp_result_gen;
END_RCPP
}
// fast_between_cluster_inert_eigen
Eigen::VectorXd fast_between_cluster_inert_eigen(const Eigen::MatrixXd& Z, const Eigen::VectorXd& cut_vals, const Eigen::VectorXi& indices, const Eigen::VectorXd& X_col, const Eigen::VectorXd& w, const Eigen::VectorXd& D);
RcppExport SEXP _divclust_fast_between_cluster_inert_eigen(SEXP ZSEXP, SEXP cut_valsSEXP, SEXP indicesSEXP, SEXP X_colSEXP, SEXP wSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cut_vals(cut_valsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X_col(X_colSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_between_cluster_inert_eigen(Z, cut_vals, indices, X_col, w, D));
    return rcpp_result_gen;
END_RCPP
}
// fast_compute_cut_values
Rcpp::NumericVector fast_compute_cut_values(Rcpp::NumericVector col);
RcppExport SEXP _divclust_fast_compute_cut_values(SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_compute_cut_values(col));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_divclust_bipart", (DL_FUNC) &_divclust_bipart, 1},
    {"_divclust_fastSubstring_cut1", (DL_FUNC) &_divclust_fastSubstring_cut1, 1},
    {"_divclust_fast_between_cluster_inert", (DL_FUNC) &_divclust_fast_between_cluster_inert, 6},
    {"_divclust_fast_between_cluster_inert_eigen", (DL_FUNC) &_divclust_fast_between_cluster_inert_eigen, 6},
    {"_divclust_fast_compute_cut_values", (DL_FUNC) &_divclust_fast_compute_cut_values, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_divclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
